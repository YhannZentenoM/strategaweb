---
import { purposes, purposesOptions } from "@info";
import CardPurpose from "@/components/CardPurpose.astro";
---
<section class="py-20 px-5">
    <div class="max-w-7xl mx-auto px-5 md:px-20 bg-white py-10">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-y-5 md:gap-y-10 gap-x-3">
        {
          purposes.map((purpose, index) => (
            <CardPurpose
              key={index}
              title={purpose.title}
              total={purpose.total}
              velocity={purpose.velocity}
              icon={purpose.icon}
            />
          ))
        }
      </div>
      <div class="flex flex-col md:flex-row max-w-2xl mx-auto gap-y-5 md:gap-y-10 gap-x-3 mt-10">
        {
          purposesOptions.map((purpose, index) => (
            <article
              class={`flex flex-col gap-y-5 group py-3 pl-3 pr-8 ${index != 1 && "border-r-2"}`}
            >
              <img src={`/images/iconos/${purpose.icon}.svg`} alt="" class="w-20 h-20 mx-auto">
              <h4 class="text-lg font-semibold text-center leading-tight">
                {purpose.title}
              </h4>
            </article>
          ))
        }
      </div>
    </div>
</section>

<style>
  section {
    background-image: url('/images/bg03.avif');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
  }
</style>

<script>
    addEventListener("DOMContentLoaded", () => {
      const contadores = document.querySelectorAll(".contador_cantidad");
  
      const animarContadores = () => {
        for (const contador of contadores) {
          const actualizar_contador = () => {
            let cantidad_maxima = +(
                (contador as HTMLElement)?.dataset.cantidadTotal || 0
              ),
              valor_actual = +((contador as HTMLElement)?.innerText || 0),
              incremento =
                cantidad_maxima /
                +((contador as HTMLElement)?.dataset.velocidad || 0);
  
            if (valor_actual < cantidad_maxima && cantidad_maxima < 99) {
              (contador as HTMLElement).innerText = Math.ceil(
                valor_actual + incremento
              ).toString();
              setTimeout(actualizar_contador, 200);
            } else if (valor_actual < cantidad_maxima && cantidad_maxima >= 99) {
              (contador as HTMLElement).innerText = Math.ceil(
                valor_actual + incremento
              ).toString();
              setTimeout(actualizar_contador, 5);
            } else {
              (contador as HTMLElement).innerText = cantidad_maxima.toString();
            }
          };
          actualizar_contador();
        }
      };
  
      const mostrarContadores = (elementos: any) => {
        elementos.forEach((elemento: any) => {
          if (elemento.isIntersecting) {
            setTimeout(animarContadores, 300);
            // observer.disconnect()
          }
        });
      };
  
      const observer = new IntersectionObserver(mostrarContadores, {
        threshold: 0.75,
      });
  
      const elementosHTML = document.querySelectorAll(".contador");
      elementosHTML.forEach((elementoHTML) => {
        observer.observe(elementoHTML);
      });
    });
  </script>